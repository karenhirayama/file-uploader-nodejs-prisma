// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String
  created_at DateTime  @default(now())
  folders    Folder[]
  files      File[]
  sessions   Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  created_at  DateTime @default(now())
  update_at   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       File[]
  parentId    String?
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderHierarchy")

  @@map("folders")
}

model File {
  id           String   @id @default(cuid())
  name         String
  originalName String
  size         Int
  mimeType     String
  url          String
  created_at   DateTime @default(now())
  update_at    DateTime @updatedAt
  userId       String
  publicId     String
  folderId     String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder       Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("files")
}
